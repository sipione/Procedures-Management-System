@page "/expedientes"
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IServicioDeSecion servicioDeSecion
@inject CasoDeUsoExpedienteConsultaTodos CasoDeUsoExpedienteConsultaTodos
@inject CasoDeUsoTramiteConsultaPorExpediente CasoDeUsoTramiteConsultaPorExpediente
@inject CasoDeUsoExpedienteModificacion CasoDeUsoExpedienteModificacion
@inject CasoDeUsoExpedienteBaja CasoDeUsoExpedienteBaja
@inject CasoDeUsoExpedienteAlta CasoDeUsoExpedienteAlta
@inject CasoDeUsoExpedienteConsultaPorld CasoDeUsoExpedienteConsultaPorld
@inject IJSRuntime JS

<h3>Gestão de Expedientes</h3>

<MensajeExito @ref=mensajeExito />

<MensajeError @ref=mensajeError />

<ExpedienteEditarCrear 
    @ref=editarCrearExpediente 
    OnUpdate="UpdatedExitoso" 
    OnError="UpdatedError"
    UsuarioRegistrado="UsuarioRegistrado" 
    _expediente="_expediente" 
    _editando="_editando" 
    _creando="_creando"
/>

<div class="expedientes_top_btns">
    <button class="btn btn-primary" @onclick="() => ListarExpedientes()">Listar Expedientes</button>
    <div class="top_btns_idbox">
        <input type="text" @bind="_idParaBuscar" />
        <button class="btn btn-primary" @onclick="() => BuscarPorId()">Buscar por Id</button>
    </div>
    <button class="btn btn-primary" @onclick="() => AbrirEspacioParaCreacion()">Nuevo Expediente</button>
</div>


@if (ExpedientesList != null && ExpedientesList.Any())
{
    <table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Nombre</th>
            <th>Fecha de Creación</th>
            <th>Fecha de Modificación</th>
            <th class="td_center">Usuário de Modificación</th>
            <th>Estado</th>
            <th>Tramites</th>
            <th class="td_center">Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var expediente in ExpedientesList)
            {
                <tr>
                    <td class="td_center">@expediente.Id</td>
                    <td>@expediente.Caratula</td>
                    <td>@expediente.FechaCreacion</td>
                    <td>@expediente.FechaUltimaModificacion</td>
                    <td class="td_center">@expediente.UsuarioUltimaModificacionId</td>
                    <td>@expediente.Estado</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => ListarTramitesDelExpediente(expediente.Id)">Ver tramites
                            Asociados</button>
                    </td>
                    <td>
                        <div class="expediente_acciones">
                            <button class="btn btn-primary" @onclick="() => AbrirEspacioDeEdicion(expediente.Id)">Editar</button>
                            <button class="btn btn-danger" @onclick="() => ConfirmarEliminacion(expediente.Id)">Eliminar</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<DialogoConfirmacion @ref=dialogo Mensaje="¿Está seguro que desea deletar el Expediente?"/>

@if (Tramites != null && Tramites.Any())
{
    <table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>ExpedienteId</th>
            <th>Etiqueta</th>
            <th>Contenido</th>
            <th>FechaCreacion</th>
            <th>FechaUltimaModificacion</th>
            <th>UsuarioUltimaModificacionId</th>
            <th>Ir al Tramite</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var tramite in Tramites)
            {
                <tr>
                    <td>@tramite.Id</td>
                    <td>@tramite.ExpedienteId</td>
                    <td>@tramite.Etiqueta</td>
                    <td>@tramite.Contenido</td>
                    <td>@tramite.FechaCreacion</td>
                    <td>@tramite.FechaUltimaModificacion</td>
                    <td>@tramite.UsuarioUltimaModificacionId</td>
                    <td>
                        <button class="btn btn-primary" @onclick="goToTramites">Ir al Tramites</button>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}

@code {
    private IEnumerable<Expediente>? ExpedientesList;
    private IEnumerable<Tramite>? Tramites;
    private Expediente? _expediente;
    private int _idParaBuscar;
    private bool _editando = false;
    private bool _creando = false;
    public Usuario? UsuarioRegistrado;
    DialogoConfirmacion dialogo = null!;
    ExpedienteEditarCrear editarCrearExpediente = null!;
    MensajeExito mensajeExito = null!;
    MensajeError mensajeError = null!;

    private void Exibirmensaje(string mensaje, string tipo)
    {
        if (tipo == "error")
        {
            mensajeError._mensajeError = mensaje;
            mensajeError.Mostrar();
        }
        else
        {
            mensajeExito._mensajeExito = mensaje;
            mensajeExito.Mostrar();
        }
    }

    private void ConfirmarEliminacion(int id)
    {
        dialogo.OnConfirmado = EventCallback.Factory.Create(this,() => EliminarExpediente(id));
        dialogo.Mostrar();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await getUsuarioRegistrado();
            StateHasChanged();
        }
    }

    private async Task getUsuarioRegistrado()
    {
        UsuarioRegistrado = await JS.InvokeAsync<Usuario?>("getUsuario");
        if (UsuarioRegistrado == null)
        {
            NavigationManager.NavigateTo("/");
        }else{
            ListarExpedientes();
        }
    }

    private void UpdatedExitoso()
    {
        if(_creando){
            Exibirmensaje("Expediente creado correctamente", "exito");
        }else{
            Exibirmensaje("Expediente modificado correctamente", "exito");
        }
        ListarExpedientes();
    }

    private void UpdatedError()
    {
        if(_creando){
            Exibirmensaje("Error al crear el expediente", "error");
        }else{
            Exibirmensaje("Error al modificar el expediente", "error");
        }
    }

    private void ListarExpedientes()
    {
        try
        {
            ExpedientesList = CasoDeUsoExpedienteConsultaTodos.Ejecutar();
            if (ExpedientesList == null || !ExpedientesList.Any())
            {
                throw new Exception("No se encontraron expedientes");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            Exibirmensaje(e.Message, "error");
        }
    }

    private void AbrirEspacioDeEdicion(int id)
    {
        _expediente = ExpedientesList.FirstOrDefault(e => e.Id == id).Clone();
        _creando = false;
        _editando = true;
        editarCrearExpediente.AbrirFormulario();
    }

    private void EliminarExpediente(int id)
    {
        try
        {
            CasoDeUsoExpedienteBaja.Ejecutar(id, UsuarioRegistrado.Id);
            Exibirmensaje("Expediente eliminado correctamente", "exito");
            ListarExpedientes();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            Exibirmensaje(e.Message, "error");
        }
    }

    private void ListarTramitesDelExpediente(int id)
    {
        try
        {
            Tramites = CasoDeUsoTramiteConsultaPorExpediente.Ejecutar(id);
            if (Tramites == null || !Tramites.Any())
            {
                throw new Exception($"No se encontraron tramites asociados al expediente con id {id}");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            Exibirmensaje(e.Message, "error");
        }
    }

    private void AbrirEspacioParaCreacion()
    {
        _expediente = new Expediente();
        _creando = true;
        _editando = false;
        editarCrearExpediente.AbrirFormulario();
    }

    private void goToTramites()
    {
        NavigationManager.NavigateTo("/tramites");
    }

    private void BuscarPorId()
    {
        try
        {
            _expediente = CasoDeUsoExpedienteConsultaPorld.Ejecutar(_idParaBuscar);
            if (_expediente == null)
            {
                throw new Exception($"No se encontró un expediente con id {_idParaBuscar}");
            }
            ExpedientesList = new List<Expediente> { _expediente };
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            Exibirmensaje(e.Message, "error");
        }
    }
}
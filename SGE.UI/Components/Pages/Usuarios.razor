@page "/usuarios"
@inject NavigationManager NavigationManager
@inject IServicioDeSecion servicioDeSecion
@rendermode InteractiveServer
@inject CasoDeUsoUsuarioConsultaTodos CasoDeUsoUsuarioConsultaTodos
@inject CasoDeUsoUsuarioModificacion CasoDeUsoUsuarioModificacion
@inject CasoDeUsoUsuarioAlta CasoDeUsoUsuarioAlta
@inject CasoDeUsoUsuarioBaja CasoDeUsoUsuarioBaja
@inject IServicioAutorizacion servicioAutorizacion

<style>
        .form-box {
        padding: 1rem .5rem;
        margin: 2rem 0rem;
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        box-shadow: 0 0 0.5rem rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        position: relative;
    }

    .form-box .close {
        position: absolute;
        top: 0;
        right: 0;
        padding: 1rem;
        color: inherit;
        outline: none;
        border: none;
        background-color: transparent;
        font-size: 1.5rem;
        color: red;
        cursor: pointer;
    }

    .form-box h4 {
        margin-bottom: 1rem;
        text-align: center;
    }

    .form-group{
        margin: 1rem 0rem;
    }
</style>

<h3>Gestion de Usuarios</h3>

@if(!string.IsNullOrEmpty(_mensajeExito))
{
    <div class="alert alert-success" role="alert">
        @_mensajeExito
    </div>
}

@if (!string.IsNullOrEmpty(_mensajeError))
{
    <div class="alert alert-danger" role="alert">
        @_mensajeError
    </div>
}

@if(_creando || _editando)
{
    <div class="form-box">
        <button class="close" @onclick="()=>{_creando = false; _editando = false;}">X</button>
        <h4>@(_creando ? "Crear" : "Editar") Usuario</h4>
        <form @onsubmit="()=>GuardarUsuario()" @onsubmit:preventDefault>
            <div class="form-group">
                <label for="nombre">Nombre</label>
                <input type="text" class="form-control" id="nombre" @bind="_usuario.Nombre" />
            </div>
            <div class="form-group">
                <label>Permisos</label>
                @foreach (Permiso permiso in Enum.GetValues(typeof(Permiso)))
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="@permiso.ToString()" checked="@(_usuario.Permisos.Contains(permiso))" @onchange="@(e => TogglePermiso(permiso, e))" />
                        <label class="form-check-label" for="@permiso.ToString()">
                            @permiso.ToString()
                        </label>
                    </div>
                }
            </div>
            <div class="form-group">
                <label for="apellido">Apellido:</label>
                <input type="text" class="form-control" id="apellido" @bind="_usuario.Apellido">
            </div>
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" class="form-control" id="email" @bind="_usuario.Email" />
            </div>
            <div class="form-group">
                <label for="password">Contraseña</label>
                <input type="password" class="form-control" id="password" @bind="_usuario.Password" />
            </div>
            
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Guardar</button>
            </div>
        </form>
    </div>
}

<button class="btn btn-primary" @onclick="()=>AbrirEspacioParaCreacion()">Crear Nuevo Usuario</button>

@if(UsuariosList != null && UsuariosList.Any()){
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>Email</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var usuario in UsuariosList)
            {
                <tr>
                    <td>@usuario.Id</td>
                    <td>@usuario.Nombre  @usuario.Apellido</td>
                    <td>@usuario.Email</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=>AbrirEspacioParaEdicion(usuario.Id)">Editar</button>
                        <button class="btn btn-danger" @onclick="()=>EliminarUsuario(usuario.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Usuario> UsuariosList { get; set; }
    private string _mensajeError = string.Empty;
    private string _mensajeExito = string.Empty;
    private Usuario _usuario = new Usuario();
    private bool _creando = false;
    private bool _editando = false;
    private Usuario UsuarioRegistrado;
    
    protected override async Task OnInitializedAsync()
    {
        try{
            var resultado = CasoDeUsoUsuarioConsultaTodos.Ejecutar();
            UsuariosList = resultado;
        }catch(Exception ex){
            ShowError(ex.Message);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        LoadSession();
    }

    protected void LoadSession()
    {
        UsuarioRegistrado = servicioDeSecion.obtenerUsuarioRegistrado();
        
        if (UsuarioRegistrado == null || !servicioAutorizacion.PoseeElPermiso(UsuarioRegistrado.Id, Permiso.UsuarioConsulta))
        {
            NavigationManager.NavigateTo("/");
        }
    }
    
    private async Task GuardarUsuario()
    {
        if(_creando){
            CrearNuevoUsuario();
            _creando = false;
        }

        if(_editando){
            EditarUsuario();
            _editando = false;
        }
    }

    private void EditarUsuario()
    {
        try{
            CasoDeUsoUsuarioModificacion.Ejecutar(_usuario, UsuarioRegistrado.Id);
            ShowExito("Usuario modificado con éxito");
        }catch(Exception ex){
            ShowError(ex.Message);
        }finally{
            OnInitializedAsync();
        }
    }
    
    private void CrearNuevoUsuario()
    {
       try{
            CasoDeUsoUsuarioAlta.Ejecutar(_usuario, UsuarioRegistrado.Id);
            ShowExito("Usuario creado con éxito");
       }catch(Exception ex){
           ShowError(ex.Message);
       }finally{
            OnInitializedAsync();
        }
    }

    private void AbrirEspacioParaEdicion(int id)
    {      
        _usuario = UsuariosList.FirstOrDefault(x => x.Id == id).Clone();
        _editando = true;
    }

    private void AbrirEspacioParaCreacion()
    {
        _usuario = new Usuario();
        _creando = true;
    }

    private void EliminarUsuario(int usuarioId)
    {
        try{
            CasoDeUsoUsuarioBaja.Ejecutar(usuarioId, 1);
            ShowExito("Usuario eliminado con éxito");
        }catch(Exception ex){
            ShowError(ex.Message);
        }
    }

    private void TogglePermiso(Permiso permiso, ChangeEventArgs e)
    {
        if ((bool)e.Value)
        {
            _usuario.Permisos.Add(permiso);
        }
        else
        {
            _usuario.Permisos.Remove(permiso);
        }
    }
    
    private void ShowError(string message)
    {
        _mensajeError = message;
        // Start the timer to clear the message after 5 seconds
        DismissMessagesAfterDelay();
    }

    private void ShowExito(string message)
    {
        _mensajeExito = message;
        // Start the timer to clear the message after 5 seconds
        DismissMessagesAfterDelay();
    }

    private async void DismissMessagesAfterDelay()
    {
        await Task.Delay(5000);
        _mensajeError = string.Empty;
        _mensajeExito = string.Empty;

        // Notify the UI that the state has changed
        InvokeAsync(StateHasChanged);
    }
}
@page "/usuarios"
@inject NavigationManager NavigationManager
@inject IServicioDeSecion servicioDeSecion
@rendermode InteractiveServer
@inject CasoDeUsoUsuarioConsultaTodos CasoDeUsoUsuarioConsultaTodos
@inject CasoDeUsoUsuarioModificacion CasoDeUsoUsuarioModificacion
@inject CasoDeUsoUsuarioAlta CasoDeUsoUsuarioAlta
@inject CasoDeUsoUsuarioBaja CasoDeUsoUsuarioBaja
@inject IServicioAutorizacion servicioAutorizacion
@inject IJSRuntime JS


<style>
        .form-box {
        padding: 1rem .5rem;
        margin: 2rem 0rem;
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        box-shadow: 0 0 0.5rem rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        position: relative;
    }

    .form-box .close {
        position: absolute;
        top: 0;
        right: 0;
        padding: 1rem;
        color: inherit;
        outline: none;
        border: none;
        background-color: transparent;
        font-size: 1.5rem;
        color: red;
        cursor: pointer;
    }

    .form-box h4 {
        margin-bottom: 1rem;
        text-align: center;
    }

    .form-group{
        margin: 1rem 0rem;
    }

    .usuario-acciones{
        display: flex;
        gap: 1rem;
        padding: 1rem 0;
    }
</style>

<h3>Gestion de Usuarios</h3>

<DialogoConfirmacion @ref=dialogo />

@if(!string.IsNullOrEmpty(_mensajeExito))
{
    <div class="alert alert-success" role="alert">
        @_mensajeExito
    </div>
}

@if (!string.IsNullOrEmpty(_mensajeError))
{
    <div class="alert alert-danger" role="alert">
        @_mensajeError
    </div>
}

<UsuarioCrearEditar @ref="crearEditarUsuario" OnUpdate="Updated" _usuario="@_usuario" OnError="ShowError" UsuarioRegistrado="@UsuarioRegistrado" _creando="@_creando" _editando="@_editando"/>

<button class="btn btn-primary" @onclick="()=>AbrirEspacioParaCreacion()">Crear Nuevo Usuario</button>

@if(UsuariosList != null && UsuariosList.Any()){
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>Email</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var usuario in UsuariosList)
            {
                <tr>
                    <td>@usuario.Id</td>
                    <td>@usuario.Nombre  @usuario.Apellido</td>
                    <td>@usuario.Email</td>
                    <td class="usuario-acciones">
                        <button class="btn btn-primary" @onclick="()=>AbrirEspacioParaEdicion(usuario.Id)">Editar</button>
                        <button class="btn btn-danger" @onclick="()=>AbrirDialogo(usuario.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Usuario>? UsuariosList { get; set; }
    private string _mensajeError = string.Empty;
    private string _mensajeExito = string.Empty;
    private Usuario _usuario = new Usuario();
    private bool _creando = false;
    private bool _editando = false;
    private Usuario? UsuarioRegistrado;
    DialogoConfirmacion dialogo = null!;
    UsuarioCrearEditar crearEditarUsuario = null!;

    private void AbrirDialogo(int id){
        dialogo.Mensaje = "¿Está seguro que desea eliminar el usuario?";
        dialogo.OnConfirmado = EventCallback.Factory.Create(this,() => EliminarUsuario(id));
        dialogo.Mostrar();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadSession();
            LoadUsuarios();
            StateHasChanged();
        }
    }

    private void LoadUsuarios()
    {
        try{
            var resultado = CasoDeUsoUsuarioConsultaTodos.Ejecutar();
            UsuariosList = resultado;
        }catch(Exception ex){
            ShowError(ex.Message);
        }
    }

    protected async Task LoadSession()
    {
        UsuarioRegistrado = await JS.InvokeAsync<Usuario?>("getUsuario");
        
        if (UsuarioRegistrado == null || !servicioAutorizacion.PoseeElPermiso(UsuarioRegistrado.Id, Permiso.UsuarioConsulta))
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void AbrirEspacioParaEdicion(int id)
    {      
        _usuario = UsuariosList.FirstOrDefault(x => x.Id == id).Clone();
        _editando = true;
        _creando = false;
        crearEditarUsuario.AbrirFormulario();
    }

    private void AbrirEspacioParaCreacion()
    {
        _usuario = new Usuario();
        _creando = true;
        _editando = false;
        crearEditarUsuario.AbrirFormulario();
    }

    private void Updated()
    {
        if(_creando){
            ShowExito("Usuario creado con éxito");
        }else{
            ShowExito("Usuario actualizado con éxito");
        }
        LoadUsuarios();
    }

    private void EliminarUsuario(int usuarioId)
    {
        try{
            CasoDeUsoUsuarioBaja.Ejecutar(usuarioId, 1);
            ShowExito("Usuario eliminado con éxito");
        }catch(Exception ex){
            ShowError(ex.Message);
        }finally{
            LoadUsuarios();
        }
    }
    
    private void ShowError(string message)
    {
        _mensajeError = message;
        // Start the timer to clear the message after 5 seconds
        DismissMessagesAfterDelay();
    }

    private void ShowExito(string message)
    {
        _mensajeExito = message;
        // Start the timer to clear the message after 5 seconds
        DismissMessagesAfterDelay();
    }

    private async void DismissMessagesAfterDelay()
    {
        await Task.Delay(5000);
        _mensajeError = string.Empty;
        _mensajeExito = string.Empty;
        StateHasChanged();
    }
}
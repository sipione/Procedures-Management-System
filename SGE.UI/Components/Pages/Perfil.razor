@page "/dashboard/perfil"
@rendermode InteractiveServer
@inject CasoDeUsoUsuarioModificacion CasoDeUsoUsuarioModificacion
@inject IServicioDeSecion servicioDeSecion
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<h3>Perfil</h3>

<MensajeExito @ref=mensajeExito />
<MensajeError @ref=mensajeError />

@if (UsuarioModificado != null)
{
    <form @onsubmit="Actualizar" @onsubmit:preventDefault>
        <div class="form-group
        ">
            <label for="nombre">Nombre</label>
            <input type="text" class="form-control" id="nombre" value="@UsuarioModificado.Nombre" @oninput="@(e => UsuarioModificado.Nombre = e.Value.ToString())" required>
        </div>
        <div class="form-group">
            <label for="apellido">Apellido</label>
            <input type="text" class="form-control" id="apellido" value="@UsuarioModificado.Apellido" @oninput="@(e => UsuarioModificado.Apellido = e.Value.ToString())" required>
        </div>
        <div class="form-group">
            <label for="email">Email</label>
            <input type="email" class="form-control" id="email" value="@UsuarioModificado.Email" @oninput="@(e => UsuarioModificado.Email = e.Value.ToString())" required>
        </div>
        <div class="form-group">
            <label for="password">Nueva Contrase単a</label>
            <input type="password" class="form-control" id="password" value="@UsuarioModificado.Password" @oninput="@(e => UsuarioModificado.Password = e.Value.ToString())">
        </div>
        <div class="form-group">
            <label for="password">Repetir Contrase単a</label>
            <input type="password" class="form-control @(!string.IsNullOrEmpty(UsuarioModificado.Password) && _confirmacionPassword != UsuarioModificado.Password ? "is-invalid" : "")" id="password" value="@_confirmacionPassword" @oninput="@(e => _confirmacionPassword = e.Value.ToString())" required=@(string.IsNullOrEmpty(UsuarioModificado.Password) ? false : true)>
            <div class="invalid-feedback">
                Las contrase単as no coinciden
            </div>
        </div>
        <button class="btn btn-primary" type="submit">Actualizar</button>
    </form>

    <button class="btn btn-danger" @onclick="Logout">Logout</button>

}

@code {
    public Usuario? UsuarioRegistrado;
    private Usuario? UsuarioModificado;
    private string? _confirmacionPassword;
    MensajeExito mensajeExito;
    MensajeError mensajeError;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
            UsuarioRegistrado = await JS.InvokeAsync<Usuario?>("getUsuario");
            if (UsuarioRegistrado == null)
            {
                NavigationManager.NavigateTo("/dashboard/login");
            }
            else
            {
                UsuarioModificado = UsuarioRegistrado.Clone();
            }
            StateHasChanged();
        }
    }

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    private void Actualizar()
    {
        if (!string.IsNullOrEmpty(UsuarioModificado.Password) && _confirmacionPassword != UsuarioModificado.Password)
        {
            ExibirMensaje("Las contrase単as no coinciden", "error");
            return;
        }

        try{
            CasoDeUsoUsuarioModificacion.Ejecutar(UsuarioModificado, UsuarioRegistrado.Id);
            UsuarioModificado = UsuarioModificado.Clone(); 
            JS.InvokeVoidAsync("setUsuario", UsuarioModificado);
            ExibirMensaje("Usuario actualizado correctamente", "exito");

        }catch (Exception e)
        {
            ExibirMensaje(e.Message, "error");
        }
    }

    private async Task Logout()
    {
        await JS.InvokeVoidAsync("removeUsuario");
        NavigationManager.NavigateTo("/dashboard/login", forceLoad: true);
    }

    private void ExibirMensaje(string mensaje, string tipo)
    {
        if (tipo == "exito")
        {
            mensajeExito._mensajeExito = mensaje;
            mensajeExito.Mostrar();
        }
        else
        {
            mensajeError._mensajeError = mensaje;
            mensajeError.Mostrar();
        }
    }

}
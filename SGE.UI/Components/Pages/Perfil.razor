@page "/perfil"
@rendermode InteractiveServer
@inject CasoDeUsoUsuarioModificacion CasoDeUsoUsuarioModificacion
@inject IServicioDeSecion servicioDeSecion
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<h3>Perfil</h3>

@if (!string.IsNullOrEmpty(_mensajeExito))
{
    <div class="alert alert-success" role="alert">
        @_mensajeExito
    </div>
}

@if (!string.IsNullOrEmpty(_mensajeError))
{
    <div class="alert alert-danger" role="alert">
        @_mensajeError
    </div>
}

@if (UsuarioModificado != null)
{
    <form @onsubmit="Actualizar" @onsubmit:preventDefault>
        <div class="form-group
        ">
            <label for="nombre">Nombre</label>
            <input type="text" class="form-control" id="nombre" value="@UsuarioModificado.Nombre" @oninput="@(e => UsuarioModificado.Nombre = e.Value.ToString())" required>
        </div>
        <div class="form-group">
            <label for="apellido">Apellido</label>
            <input type="text" class="form-control" id="apellido" value="@UsuarioModificado.Apellido" @oninput="@(e => UsuarioModificado.Apellido = e.Value.ToString())" required>
        </div>
        <div class="form-group">
            <label for="email">Email</label>
            <input type="email" class="form-control" id="email" value="@UsuarioModificado.Email" @oninput="@(e => UsuarioModificado.Email = e.Value.ToString())" required>
        </div>
        <div class="form-group">
            <label for="password">Nueva Contrase単a</label>
            <input type="password" class="form-control" id="password" value="@UsuarioModificado.Password" @oninput="@(e => UsuarioModificado.Password = e.Value.ToString())">
        </div>
        <div class="form-group">
            <label for="password">Repetir Contrase単a</label>
            <input type="password" class="form-control @(!string.IsNullOrEmpty(UsuarioModificado.Password) && _confirmacionPassword != UsuarioModificado.Password ? "is-invalid" : "")" id="password" value="@_confirmacionPassword" @oninput="@(e => _confirmacionPassword = e.Value.ToString())" required=@(string.IsNullOrEmpty(UsuarioModificado.Password) ? false : true)>
            <div class="invalid-feedback">
                Las contrase単as no coinciden
            </div>
        </div>
        <button class="btn btn-primary" type="submit">Actualizar</button>
    </form>

    <button class="btn btn-danger" @onclick="Logout">Logout</button>

}

@code {
    public Usuario? UsuarioRegistrado;
    private Usuario? UsuarioModificado;
    private string? _confirmacionPassword;
    private string? _mensajeExito;
    private string? _mensajeError;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
            UsuarioRegistrado = await JS.InvokeAsync<Usuario?>("getUsuario");
            if (UsuarioRegistrado == null)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                UsuarioModificado = UsuarioRegistrado.Clone();
            }
            StateHasChanged();
        }
    }

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    private void Actualizar()
    {
        if (!string.IsNullOrEmpty(UsuarioModificado.Password) && _confirmacionPassword != UsuarioModificado.Password)
        {
            ShowMensajeError("Las contrase単as no coinciden");
            return;
        }

        try{
            CasoDeUsoUsuarioModificacion.Ejecutar(UsuarioModificado, UsuarioRegistrado.Id);
            UsuarioModificado = UsuarioModificado.Clone(); 
            JS.InvokeVoidAsync("setUsuario", UsuarioModificado);
            ShowMensajeExito("Usuario actualizado correctamente");

        }catch (Exception e)
        {
            ShowMensajeError(e.Message);
        }
    }

    private async Task Logout()
    {
        await JS.InvokeVoidAsync("removeUsuario");
        NavigationManager.NavigateTo("/login", forceLoad: true);
    }

    private void ShowMensajeExito(string mensaje)
    {
        _mensajeExito = mensaje;
        BlanquearMensajeDepouesDeUnTiempo();
    }

    private void ShowMensajeError(string mensaje)
    {
        _mensajeError = mensaje;
        BlanquearMensajeDepouesDeUnTiempo();
    }

    private void BlanquearMensajeDepouesDeUnTiempo()
    {
        Task.Delay(5000).ContinueWith(t =>
        {
            _mensajeExito = null;
            _mensajeError = null;
            StateHasChanged();
        });
    }

}
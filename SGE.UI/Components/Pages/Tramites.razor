@page "/tramites"
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject CasoDeUsoTramiteConsultaTodos CasoDeUsoTramiteConsultaTodos
@inject CasoDeUsoExpedienteConsultaTodos CasoDeUsoExpedienteConsultaTodos
@inject CasoDeUsoExpedienteConsultaPorld CasoDeUsoExpedienteConsultaPorld
@inject CasoDeUsoTramiteBaja CasoDeUsoTramiteBaja
@inject CasoDeUsoTramiteAlta CasoDeUsoTramiteAlta
@inject CasoDeUsoTramiteModificacion CasoDeUsoTramiteModificacion
@inject IServicioDeSecion servicioDeSecion

<style>
        .form-box {
        padding: 1rem .5rem;
        margin: 2rem 0rem;
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        box-shadow: 0 0 0.5rem rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        position: relative;
    }

    .form-box .close {
        position: absolute;
        top: 0;
        right: 0;
        padding: 1rem;
        color: inherit;
        outline: none;
        border: none;
        background-color: transparent;
        font-size: 1.5rem;
        color: red;
        cursor: pointer;
    }

    .form-box h4 {
        margin-bottom: 1rem;
        text-align: center;
    }

    .form-group{
        margin: 1rem 0rem;
    }
</style>

<h3>Gestión de Trámites</h3>

@if(!string.IsNullOrEmpty(_mensajeExito))
{
    <div class="alert alert-success" role="alert">
        <Icon Name="IconName.InfoCircleFill" class="me-2"/>
        @_mensajeExito
    </div>
}

@if (!string.IsNullOrEmpty(_mensajeError))
{
    <div class="alert alert-danger" role="alert">
        @_mensajeError
    </div>
}

@if (_editando || _creando)
{
    <div class="form-box">
        <span class="close" @onclick="CerrarFormulario">&times;</span>
        <h4>@(_creando ? "Crear Nuevo" : "Editar") Trámite</h4>
        <form @onsubmit="GuardarTramite" @onsubmit:preventDefault>
            @if (!_creando)
            {
                <div class="form-group">
                    <label for="etiqueta">Etiqueta</label>
                    <select class="form-control" id="etiqueta" @bind="_tramite.Etiqueta">
                        @foreach (var etiqueta in Enum.GetValues(typeof(EtiquetaTramite)))
                        {
                            <option value="@etiqueta">@etiqueta</option>
                        }
                    </select>
                </div>
            }
            <div class="form-group">
                <label for="contenido">Contenido</label>
                <input type="text" class="form-control" id="contenido" placeholder="Escriba el Contenido" @bind="_tramite.Contenido" required>
            </div>
            <div class="form-group">
                <label for="expedienteId">ExpedienteId</label>
                <select class="form-control" id="expedienteId" @bind="_tramite.ExpedienteId" required>
                    @foreach (var expediente in ExpedientesList)
                    {
                        <option value="@expediente.Id">@expediente.Caratula</option>
                    }
                </select>
            </div>
            <button type="submit" class="btn btn-primary">Guardar</button>
            <button class="btn btn-secondary" type="reset">Reset</button>
        </form>
    </div>

}

<button class="btn btn-primary" @onclick="() => AbrirEspacioParaCreacion()" >Nuevo Trámite</button>

@if (TramitesList != null && TramitesList.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Etiqueta</th>
                <th>Contenido</th>
                <th>FechaCreacion</th>
                <th>FechaUltimaModificacion</th>
                <th>UsuarioUltimaModificacionId</th>
                <th>ExpedienteId</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tramite in TramitesList)
            {
                <tr>
                    <td>@tramite.Id</td>
                    <td>@tramite.Etiqueta</td>
                    <td>@tramite.Contenido</td>
                    <td>@tramite.FechaCreacion</td>
                    <td>@tramite.FechaUltimaModificacion</td>
                    <td>@tramite.UsuarioUltimaModificacionId</td>
                    <td>@tramite.ExpedienteId</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => ViewExpediente(tramite.ExpedienteId)">Ver Expediente</button>
                        <button class="btn btn-primary" @onclick="() => AbrirEspacioParaEdicion(tramite.Id)">Editar</button>
                        <button class="btn btn-danger" @onclick="() => DeleteTramite(tramite.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (_expediente != null)
{
    <div>
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Expediente</h5>
                    <button type="button" class="close" @onclick="()=>closeHandle()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Id: @_expediente.Id</p>
                    <p>Nombre: @_expediente.Caratula</p>
                    <p>FechaCreacion: @_expediente.FechaCreacion</p>
                    <p>FechaUltimaModificacion: @_expediente.FechaUltimaModificacion</p>
                    <p>UsuarioUltimaModificacionId: @_expediente.UsuarioUltimaModificacionId</p>
                    <p>Estado: @_expediente.Estado</p>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<Tramite>? TramitesList;
    private IEnumerable<Expediente>? ExpedientesList;
    private string _mensajeError = string.Empty;
    private string _mensajeExito = string.Empty;
    private Expediente? _expediente;
    private bool _editando = false;
    private bool _creando = false;
    private Tramite? _tramite;
    private EstadoUsuario _estadoUsuario;

    protected override async Task OnInitializedAsync()
    {
        try{
            var respuesta = CasoDeUsoTramiteConsultaTodos.Ejecutar();
            if (respuesta == null || !respuesta.Any()){
                throw new Exception("No se encontraron trámites");
            }
            TramitesList = respuesta;
        }
        catch (Exception ex)
        {
            ShowError(ex.Message);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        LoadSession();
        LoadExpedientes();
    }


    protected void LoadSession()
    {
        _estadoUsuario = servicioDeSecion.obtenerEstadoUsuario();
        if (_estadoUsuario == EstadoUsuario.Desconectado)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    protected void LoadExpedientes()
    {
        try{
            var respuesta = CasoDeUsoExpedienteConsultaTodos.Ejecutar();

            if (respuesta == null || !respuesta.Any()){
                throw new Exception("No se encontraron expedientes");
            }
            
            ExpedientesList = respuesta;
        }
        catch (Exception ex)
        {
            ShowError(ex.Message);
        }
    }
    
    private void AbrirEspacioParaCreacion()
    {
        _tramite = new Tramite();
        _creando = true;
        _editando = false;
    }

    private void AbrirEspacioParaEdicion(int id)
    {
        _tramite = TramitesList.FirstOrDefault(t => t.Id == id);
        _editando = true;
        _creando = false;
    }

    private void ViewExpediente( int id )
    {
        try{
            _expediente = CasoDeUsoExpedienteConsultaPorld.Ejecutar(id);
            if (_expediente == null){
                throw new Exception("No se encontró el expediente");
            }
        }
        catch (Exception ex)
        {
            ShowError(ex.Message);
        
        }
    }

    private void DeleteTramite(int tramiteId)
    {
        try{
            CasoDeUsoTramiteBaja.Ejecutar(tramiteId, 1);
            ShowExito("Trámite eliminado correctamente");
            OnInitializedAsync();
        }
        catch (Exception ex)
        {
            ShowError(ex.Message);
        }
    }

    private void closeHandle()
    {
        _expediente = null;
    }

    private void CerrarFormulario()
    {
        _editando = false;
        _creando = false;
    }

    private void GuardarTramite()
    {
        if (_creando)
        {
            _creando = false;
            CrearNuevoTramite();
        }

        if (_editando)
        {
            _editando = false;
            ActualizarTramite();
        }
    }

    private void CrearNuevoTramite()
    {
        try
        {
            CasoDeUsoTramiteAlta.Ejecutar(_tramite, 1);
            ShowExito("Trámite creado correctamente");
            OnInitializedAsync();
        }
        catch (Exception ex)
        {
            ShowError(ex.Message);
        }
    }

    private void ActualizarTramite()
    {
        try
        {
            CasoDeUsoTramiteModificacion.Ejecutar(_tramite, 1);
            ShowExito("Trámite actualizado correctamente");
            OnInitializedAsync();
        }
        catch (Exception ex)
        {
            ShowError(ex.Message);
        }
    }

    public void ShowError(string message)
    {
        _mensajeError = message;
        // Start the timer to clear the message after 5 seconds
        DismissMessagesAfterDelay();
    }

    private void ShowExito(string message)
    {
        _mensajeExito = message;
        // Start the timer to clear the message after 5 seconds
        DismissMessagesAfterDelay();
    }

    private async void DismissMessagesAfterDelay()
    {
        await Task.Delay(5000);
        _mensajeError = string.Empty;
        _mensajeExito = string.Empty;

        // Notify the UI that the state has changed
        InvokeAsync(StateHasChanged);
    }
}
@page "/dashboard/tramites"
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject CasoDeUsoTramiteConsultaTodos CasoDeUsoTramiteConsultaTodos
@inject CasoDeUsoExpedienteConsultaTodos CasoDeUsoExpedienteConsultaTodos
@inject CasoDeUsoExpedienteConsultaPorld CasoDeUsoExpedienteConsultaPorld
@inject CasoDeUsoTramiteBaja CasoDeUsoTramiteBaja
@inject CasoDeUsoTramiteAlta CasoDeUsoTramiteAlta
@inject CasoDeUsoTramiteModificacion CasoDeUsoTramiteModificacion
@inject IServicioDeSecion servicioDeSecion
@inject CasoDeUsoTramiteConsultaPorEtiqueta CasoDeUsoTramiteConsultaPorEtiqueta
@inject CasoDeUsoTramiteConsultaPorExpediente CasoDeUsoTramiteConsultaPorExpediente
@inject IJSRuntime JS

<h3>Gestión de Trámites</h3>

<DialogoConfirmacion @ref=dialogo />

<MensajeError @ref=mensajeError />

<MensajeExito @ref=mensajeExito />

<TramiteEditarCrear 
    @ref=editarCrearTramite
    _creando="_creando" 
    _editando="_editando" 
    _tramite="_tramite" 
    ExpedientesList="@ExpedientesList" 
    OnUpdate="UpdatedExitoso" 
    UsuarioRegistrado="@UsuarioRegistrado" 
    OnError="UpdateError" 
/>

<button class="btn btn-primary" @onclick="() => AbrirEspacioParaCreacion()" >Nuevo Trámite</button>
<button class="btn btn-primary" @onclick="mostrarEtiquetas">Buscar por Etiqueta</button>
<button class="btn btn-primary" @onclick="mostrarExpedeidnte">Buscar por Expediente</button>
<button class="btn btn-primary" @onclick="LoadTramites">Recargar</button>

@if(etiquetasVisible || expedientesVisible)
{
    <div class="form-box tramites-custom-form-box">
        <button class="close-custom" @onclick="closeEtiquetas">X</button>

        @if(etiquetasVisible)
        {
            <div class="tramites-custom-search">
                <select @bind="EtiquetaSeleccionada" class="form-control">
                    <option value="">Seleccione una etiqueta</option>
                    @foreach (var etiqueta in Enum.GetValues(typeof(EtiquetaTramite)))
                    {
                        <option value="@etiqueta">@etiqueta</option>
                    }
                </select>
                <button class="btn btn-primary" @onclick="()=>buscarPorEtiqueta(EtiquetaSeleccionada)">Buscar</button>
            </div>
        }
        @if(expedientesVisible)
        {
        <div class="tramites-custom-search">
            <select @bind="IdExpedienteSeleccionado" class="form-control">
                <option value="">Seleccione un expediente</option>
                @foreach (var expediente in ExpedientesList)
                {
                    <option value="@expediente.Id">@expediente.Caratula</option>
                }
            </select>
            <button class="btn btn-primary" @onclick="()=>buscarPorExpediente(IdExpedienteSeleccionado.ToString())">Buscar</button>
        </div>
        }
    </div>
}

@if (TramitesList != null && TramitesList.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Etiqueta</th>
                <th>Contenido</th>
                <th>Fecha Creacion</th>
                <th>Fecha Ultima Modificacion</th>
                <th class="td_center">Usuario Ultima Modificacion</th>
                <th>Expediente</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tramite in TramitesList)
            {
                <tr>
                    <td class="td_center">@tramite.Id</td>
                    <td>@tramite.Etiqueta</td>
                    <td>@tramite.Contenido</td>
                    <td>@tramite.FechaCreacion</td>
                    <td>@tramite.FechaUltimaModificacion</td>
                    <td class="td_center">@tramite.UsuarioUltimaModificacionId</td>
                    <td class="td_center">@tramite.ExpedienteId</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => ViewExpediente(tramite.ExpedienteId)">Ver Expediente</button>
                        <button class="btn btn-primary" @onclick="() => AbrirEspacioParaEdicion(tramite.Id)">Editar</button>
                        <button class="btn btn-danger" @onclick="() => abrirDialogo(tramite.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (_expediente != null)
{
    <div>
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Expediente</h5>
                    <button type="button" class="close" @onclick="()=>closeHandle()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Id: @_expediente.Id</p>
                    <p>Nombre: @_expediente.Caratula</p>
                    <p>FechaCreacion: @_expediente.FechaCreacion</p>
                    <p>FechaUltimaModificacion: @_expediente.FechaUltimaModificacion</p>
                    <p>UsuarioUltimaModificacionId: @_expediente.UsuarioUltimaModificacionId</p>
                    <p>Estado: @_expediente.Estado</p>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<Tramite>? TramitesList;
    private IEnumerable<Expediente>? ExpedientesList;
    private Expediente? _expediente;
    private bool _editando = false;
    private bool _creando = false;
    private Tramite? _tramite;
    private Usuario? UsuarioRegistrado;
    private bool etiquetasVisible = false;
    private bool expedientesVisible = false;
    private EtiquetaTramite EtiquetaSeleccionada;
    private int IdExpedienteSeleccionado;
    DialogoConfirmacion dialogo = null!;
    TramiteEditarCrear editarCrearTramite = null!;
    MensajeError mensajeError = null!;
    MensajeExito mensajeExito = null!;

    private void abrirDialogo(int id)
    {
        dialogo.Mensaje = "¿Está seguro que desea eliminar el Trámite?";
        dialogo.OnConfirmado = EventCallback.Factory.Create(this, () => DeleteTramite(id));
        dialogo.Mostrar();
    }

    private void ExibirMensaje(string mensaje, string tipo)
    {
        if (tipo == "error")
        {
            mensajeError.Mostrar();
            mensajeError._mensajeError = mensaje;
        }
        else
        {
            mensajeExito.Mostrar();
            mensajeExito._mensajeExito = mensaje;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await LoadSession();

            if(TramitesList == null || !TramitesList.Any())
            {
                LoadTramites();
            }
            if(ExpedientesList == null || !ExpedientesList.Any())
            {
                LoadExpedientes();
            }
            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        StateHasChanged();
    }

    protected void LoadTramites()
    {
        try{
            var respuesta = CasoDeUsoTramiteConsultaTodos.Ejecutar();
            if (respuesta == null || !respuesta.Any()){
            throw new Exception("No se encontraron trámites");
        }
        TramitesList = respuesta;
        }
        catch (Exception ex)
        {
            ExibirMensaje(ex.Message, "error");
        }
    }

    protected async Task LoadSession()
    {
        UsuarioRegistrado = await JS.InvokeAsync<Usuario?>("getUsuario");
        if (UsuarioRegistrado == null)
        {
            NavigationManager.NavigateTo("/dashboard");
        }
    }

    protected void LoadExpedientes()
    {
        try{
            var respuesta = CasoDeUsoExpedienteConsultaTodos.Ejecutar();

            if (respuesta == null || !respuesta.Any()){
                throw new Exception("No se encontraron expedientes");
            }
            
            ExpedientesList = respuesta;
        }
        catch (Exception ex)
        {
            ExibirMensaje(ex.Message, "error");
        }
    }
    
    private void AbrirEspacioParaCreacion()
    {
        _tramite = new Tramite();
        _creando = true;
        _editando = false;
        editarCrearTramite.AbrirFormulario();
    }

    private void AbrirEspacioParaEdicion(int id)
    {
        _tramite = TramitesList.FirstOrDefault(t => t.Id == id).Clone();
        _editando = true;
        _creando = false;
        editarCrearTramite.AbrirFormulario();
    }

    private void UpdatedExitoso()
    {
        if(_creando){
            ExibirMensaje("Expediente creado correctamente", "exito");
        }else{
            ExibirMensaje("Expediente actualizado correctamente", "exito");
        }

        LoadTramites();
    }

    private void UpdateError(string mesaje)
    {
        if(_creando){
            ExibirMensaje($"Error al crear el expediente: {mesaje}", "error");
        }else{
            ExibirMensaje($"Error al actualizar el expediente: {mesaje}", "error");
        }
    }

    private void ViewExpediente( int id )
    {
        try{
            _expediente = CasoDeUsoExpedienteConsultaPorld.Ejecutar(id);
            if (_expediente == null){
                throw new Exception("No se encontró el expediente");
            }
        }
        catch (Exception ex)
        {
            ExibirMensaje(ex.Message, "error");
        
        }
    }

    private void DeleteTramite(int tramiteId)
    {
        if(UsuarioRegistrado == null){
            ExibirMensaje("No se pudo obtener el usuario logueado", "error");
            return;
        }
        try{
            CasoDeUsoTramiteBaja.Ejecutar(tramiteId, UsuarioRegistrado.Id);
            ExibirMensaje("Trámite eliminado correctamente", "exito");
            LoadTramites();
        }
        catch (Exception ex)
        {
            ExibirMensaje(ex.Message, "error");
        }
    }

    private void closeHandle()
    {
        _expediente = null;
    }

    private void mostrarEtiquetas()
    {
        etiquetasVisible = true;
        expedientesVisible = false;
    }

    private void mostrarExpedeidnte()
    {
        etiquetasVisible = false;
        expedientesVisible = true;
    }

    private void closeEtiquetas()
    {
        etiquetasVisible = false;
        expedientesVisible = false;
    }

    private void buscarPorEtiqueta(EtiquetaTramite etiqueta)
    {
        try{
            var respuesta = CasoDeUsoTramiteConsultaPorEtiqueta.Ejecutar(etiqueta);
            if (respuesta == null || !respuesta.Any()){
                throw new Exception("No se encontraron trámites con la etiqueta seleccionada");
            }
            TramitesList = respuesta;
        }
        catch (Exception ex)
        {
            ExibirMensaje(ex.Message, "error");
        }
    }

    private void buscarPorExpediente(string id)
    {
        try{
            IEnumerable<Tramite> respuesta = CasoDeUsoTramiteConsultaPorExpediente.Ejecutar(int.Parse(id));
            if (respuesta == null || !respuesta.Any()){
                throw new Exception("No se encontraron trámites con el expediente seleccionado");
            }
            TramitesList = respuesta;
        }
        catch (Exception ex)
        {
            ExibirMensaje(ex.Message, "error");
        }
    }
}
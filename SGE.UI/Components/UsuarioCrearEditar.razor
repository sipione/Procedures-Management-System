@rendermode InteractiveServer
@inject CasoDeUsoUsuarioConsultaTodos CasoDeUsoUsuarioConsultaTodos
@inject CasoDeUsoUsuarioModificacion CasoDeUsoUsuarioModificacion
@inject CasoDeUsoUsuarioAlta CasoDeUsoUsuarioAlta


@if(mostrar)
{
    <div class="form-box">
        <button class="close" @onclick="CerrarFormulario">&times;</button>
        <h4>@(_creando ? "Crear" : "Editar") Usuario</h4>
        <form @onsubmit="()=>GuardarUsuario()" @onsubmit:preventDefault>
            <div class="form-group">
                <label for="nombre">Nombre</label>
                <input type="text" class="form-control" id="nombre" @bind="_usuario.Nombre" />
            </div>
            @if(_editando){
                <div class="form-group">
                    <label>Permisos</label>
                    @foreach (Permiso permiso in Enum.GetValues(typeof(Permiso)))
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="@permiso.ToString()" checked="@(_usuario.Permisos.Contains(permiso))" @onchange="@(e => TogglePermiso(permiso, e))" />
                            <label class="form-check-label" for="@permiso.ToString()">
                                @permiso.ToString()
                            </label>
                        </div>
                    }
                </div>
            }
            <div class="form-group">
                <label for="apellido">Apellido:</label>
                <input type="text" class="form-control" id="apellido" @bind="_usuario.Apellido">
            </div>
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" class="form-control" id="email" @bind="_usuario.Email" />
            </div>
            <div class="form-group">
                <label for="password">Contrase√±a</label>
                <input type="password" class="form-control" id="password" @bind="_usuario.Password" />
            </div>
            
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Guardar</button>
            </div>
        </form>
    </div>
}

@code{
    private bool mostrar = false;
    [Parameter]
    public bool _editando { get; set; }
    [Parameter]
    public bool _creando { get; set; }
    [Parameter]
    public Usuario? _usuario { get; set; }
    [Parameter]
    public EventCallback OnUpdate { get; set; }
    [Parameter]
    public Usuario? UsuarioRegistrado { get; set; }
    [Parameter]
    public EventCallback<string> OnError { get; set; }

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    public void AbrirFormulario()
    {
        mostrar = true;
    }

    private void CerrarFormulario()
    {
        mostrar = false;
    }

    private void TogglePermiso(Permiso permiso, ChangeEventArgs e)
    {
        if ((bool)e.Value)
        {
            _usuario.Permisos.Add(permiso);
        }
        else
        {
            _usuario.Permisos.Remove(permiso);
        }
    }

    private async Task GuardarUsuario()
    {
        if (_creando)
        {
            CrearNuevoUsuario();
        }

        if(_editando)
        {
            EditarUsuario();
        }
    }

     private void CrearNuevoUsuario()
    {
       try{
            CasoDeUsoUsuarioAlta.Ejecutar(_usuario, UsuarioRegistrado.Id);
            OnUpdate.InvokeAsync();
       }catch(Exception ex){
           OnError.InvokeAsync(ex.Message);
       }finally{
            CerrarFormulario();
        }
    }

    private void EditarUsuario()
    {
        try{
            CasoDeUsoUsuarioModificacion.Ejecutar(_usuario, UsuarioRegistrado.Id);
            OnUpdate.InvokeAsync();
        }catch(Exception ex){
            OnError.InvokeAsync(ex.Message);
        }finally{
            CerrarFormulario();
        }
    }

}